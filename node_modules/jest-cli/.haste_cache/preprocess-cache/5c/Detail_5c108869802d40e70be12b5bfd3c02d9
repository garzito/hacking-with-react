/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_superagent = require('superagent'); /* istanbul ignore next */var _superagent2 = _interopRequireDefault(_superagent);
var /* istanbul ignore next */_reactRouter = require('react-router'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var 

Detail = function (_React$Component) {_inherits(Detail, _React$Component);
    function Detail(props) {/* istanbul ignore next */_classCallCheck(this, Detail); /* istanbul ignore next */var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Detail).call(this, 
        props));

        /* istanbul ignore next */_this.state = { 
            mode: 'commits', 
            commits: [], 
            forks: [], 
            pulls: [] }; /* istanbul ignore next */return _this;}_createClass(Detail, [{ key: 'fetchFeed', value: function fetchFeed(



        type) {/* istanbul ignore next */var _this2 = this;
            var baseUrl = 'https://api.github.com/repos/facebook';
            /* istanbul ignore next */_superagent2.default.get( /* istanbul ignore next */baseUrl + '/' + this.props.params.repo + '/' + type).
            end(function (error, response) {
                if (!error && response) {
                    /* istanbul ignore next */_this2.setState( /* istanbul ignore next */_defineProperty({}, type, response.body));} else 
                {
                    console.log( /* istanbul ignore next */'There was an error fetching ' + type + ' from Github', error);}});} }, { key: 'componentWillMount', value: function componentWillMount() 





        {
            this.fetchFeed('commits');
            this.fetchFeed('forks');
            this.fetchFeed('pulls');} }, { key: 'renderCommits', value: function renderCommits() 


        {
            return this.state.commits.map(function (commit, index) {
                var author = commit.author ? commit.author.login : 'Anonymous';

                return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ key: index }, 
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ to: /* istanbul ignore next */'/user/' + author }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'strong', /* istanbul ignore next */null, author)), /* istanbul ignore next */': ', 
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ href: commit.html_url }, commit.commit.message), /* istanbul ignore next */'.'));});} }, { key: 'renderForks', value: function renderForks() 





        {
            return this.state.forks.map(function (fork, index) {
                var owner = fork.owner ? fork.owner.login : 'Anonymous';

                return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ key: index }, 
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ to: /* istanbul ignore next */'/user/' + owner }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'strong', /* istanbul ignore next */null, owner)), /* istanbul ignore next */': forked to ', 
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ href: fork.html_url }, fork.html_url), /* istanbul ignore next */'. at ', fork.created_at, /* istanbul ignore next */'.'));});} }, { key: 'renderPulls', value: function renderPulls() 





        {
            return this.state.pulls.map(function (pull, index) {
                var user = pull.user ? pull.user.login : 'Anonymous';

                return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ key: index }, 
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ to: /* istanbul ignore next */'/user/' + user }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'strong', /* istanbul ignore next */null, user)), /* istanbul ignore next */': ', 
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ href: pull.html_url }, pull.body), /* istanbul ignore next */'.'));});} }, { key: 'selectMode', value: function selectMode(





        mode) {
            this.setState({ mode: mode });} }, { key: 'render', value: function render() 


        {
            var content = /* istanbul ignore next */void 0;

            if (this.state.mode === 'commits') {
                content = this.renderCommits();} else 
            if (this.state.mode === 'forks') {
                content = this.renderForks();} else 
            {
                content = this.renderPulls();}


            return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */null, 
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */null, /* istanbul ignore next */'You are here: ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.IndexLink, /* istanbul ignore next */{ to: '/', activeClassName: 'active' }, /* istanbul ignore next */'Home'), /* istanbul ignore next */' > ', this.props.params.repo), 
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: this.selectMode.bind(this, 'commits') }, /* istanbul ignore next */'Show Commits'), 
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: this.selectMode.bind(this, 'forks') }, /* istanbul ignore next */'Show Forks'), 
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: this.selectMode.bind(this, 'pulls') }, /* istanbul ignore next */'Show Pulls'), 
                content));} }]);return Detail;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = Detail;